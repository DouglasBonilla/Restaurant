@page "/order/index"
@inject HttpClient http
@inject NavigationManager NavManager;

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .container {
            background-color: #F8F3CC;
            border: solid 1px #808080;
            padding-top: 40px;
            padding-bottom: 20px;
            border-radius: 8px;
        }

        .table-responsive {
            width: 100%;
            overflow-x: auto;
            margin-top: 20px;
            border: 1px solid #ddd;
        }

        .btn-search {
            background-color: #2F2F2F;
            color: white;
            border: none;
            padding: 9px 20px;
            cursor: pointer;
            border-radius: 5px;
            font-weight: bold;
        }

            .btn-search:hover {
                background-color: #000;
                color: white;
            }

        .search-bar {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

            .search-bar label {
                margin-right: 10px;
                font-weight: bold;
            }

            .search-bar input {
                margin-right: 10px;
                flex-grow: 1;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 10px;
                text-align: left;
                white-space: nowrap;
            }

            .table th {
                background-color: #2C2C2C;
                color: white;
            }

            .table tr:nth-child(even) {
                background-color: #f9f9f9;
            }

        .table-responsive {
            max-height: 400px; /* Define la altura máxima para el scroll vertical */
            overflow-y: auto; /* Agrega desplazamiento vertical si es necesario */
        }
    </style>
</head>

<PageTitle>Index</PageTitle>

<h3>Órdenes</h3>
<div class="container">
    <div class="search-bar">
        <label for="searchName">Cliente:</label>
        <input type="text" placeholder="Escriba para buscar" class="form-control" id="searchName" @bind-value="orderbus.CustomerName" />

        <button class="btn-search" @onclick="BuscarOrder">Buscar</button>
    </div>
</div>

@if (isLoading)
{
    <p><em>Cargando...</em></p>
}
else if (orders == null)
{
    <p>No se encontraron órdenes.</p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Cliente</th>
                    <th>Total</th>
                    <th>Fecha de orden</th>
                    <th>Dirección</th>
                    <th>Email</th>
                    <th>Teléfono</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr>
                        <td>@order.CustomerName</td>
                        <td>@order.Total</td>
                        <td>@order.OrderTime.ToShortDateString()</td> 
                        <td>@order.Address</td>
                        <td>@order.Email</td>
                        <td>@order.Phone</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private orderTable[]? orders;
    private OrderDTO orderbus = new OrderDTO();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        try
        {
            orders = await http.GetFromJsonAsync<orderTable[]>("orderTable");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar órdenes: {ex.Message}");
            orders = Array.Empty<orderTable>(); 
        }
        finally
        {
            isLoading = false; 
            StateHasChanged(); 
        }
    }


    private async void BuscarOrder()
    {
        var result = await http.PostAsJsonAsync("orderTable/Buscar", orderbus);
        var content = await result.Content.ReadAsStringAsync();
        orders = JsonSerializer.Deserialize<orderTable[]>(content,
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        StateHasChanged();
    }

    void newOrder()
    {
        NavManager.NavigateTo("/order/create");
    }

    void goModify(int pId)
    {
        NavManager.NavigateTo($"/order/edit/{pId}");
    }

    void goDetail(int pId)
    {
        NavManager.NavigateTo($"/order/detail/{pId}");
    }

    void goDelete(int pId)
    {
        NavManager.NavigateTo($"/order/delete/{pId}");
    }
}
