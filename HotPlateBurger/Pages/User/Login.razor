@page "/user/login"
@inject HttpClient http
@inject NavigationManager NavManager;
@inject IJSRuntime JS

<style>
    .login-background {
        background-image: url('/images/r.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        height: 100vh; 
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .login-container {
        background-color: rgba(255, 255, 255, 0.8); 
        padding: 20px;
        border-radius: 10px;
        width: 300px;
        margin-left: 600px;
    }
    .title {

        font-weight: bold;
        margin-bottom: 20px;
    }

    .btn-primary {
        background-color: #FFAF36;
        color: white;
        font-weight: bold;
        margin-top: 30px;
        margin-left: 68px;
        border: none;
    }

    .btn-primary:hover {
            background-color: #E69B2F;
            color: white;
    }
    .margin {
        margin-top: 20px;
    }
</style>

<div class="login-background">
    <div class="login-container">
        <h2 class="title">Inicio de sesión</h2>
        <div>
            <label for="email">Email:</label>
            <InputText id="username" @bind-Value="login.Email" class="form-control" placeholder="Ingresa tu correo electrónico" />
        </div>

        <div class="margin">
            <label class="label" for="password">Password:</label>
            <InputText id="password" @bind-Value="login.Password" type="password" class="form-control" placeholder="Ingresa tu contraseña" />
        </div>

        <button type="submit" class="btn btn-primary" @onclick="HandleLogin">Iniciar sesión</button>
    </div>
</div>

@code {
    LoginDto login = new LoginDto();

    public async Task HandleLogin()
    {
        try
        {
            var response = await http.PostAsJsonAsync("login", login);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await SaveTokenToLocalStorage(token.ToString());
            }
            else
            {
                // Manejar error de autenticación aquí, como mostrar un mensaje al usuario
                Console.WriteLine("Login failed.");
            }
        }
        catch (Exception)
        {
            
            throw;
        }
    }
    private async Task SaveTokenToLocalStorage(string token)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "Token", token);
    }

}

