@page "/food/menu"
@inject HttpClient http
@inject NavigationManager NavManager

<PageTitle>Menu</PageTitle>
<head>
    <style>
        body {
            background-color: #fdf7e7;
        }

        .card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            justify-content: space-around;
        }

        .card {
            width: 250px;
            border: 1px solid #ddd;
            border-radius: 16px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            background-color: white;
            position: relative;
            padding: 16px;
        }

        .card-img-top {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-radius: 16px 16px 0 0;
            border-top: 4px solid #f9a825; /* Borde superior amarillo */
        }

        .card-body {
            padding: 16px;
            text-align: center;
        }

        .card-title {
            font-size: 1.25rem;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .price {
            font-size: 1.5rem;
            color: #000;
            font-weight: bold;
        }

        .cart-icon {
            position: absolute;
            bottom: 16px;
            right: 16px;
            font-size: 24px;
            background-color: #333;
            color: white;
            border-radius: 50%;
            padding: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .cart-icon:hover {
                background-color: #f9a825;
            }

        /* Category buttons styles */
        .category-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .category {
            display: flex;
            align-items: center;
            flex-direction: column;
            border: 1px solid #ddd;
            border-radius: 16px;
            padding: 10px;
            background-color: #fff;
            width: 100px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .category:hover {
                background-color: #f9a825;
            }

            .category img {
                width: 40px;
                height: 40px;
            }

        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.5); /* Fallback color */
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            border-radius: 8px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }

        .cart-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

            .cart-item img {
                width: 50px;
                height: 50px;
                object-fit: cover;
                border-radius: 8px;
                margin-right: 10px;
            }

        .quantity {
            display: flex;
            align-items: center;
        }

            .quantity button {
                background-color: #f9a825;
                color: white;
                border: none;
                padding: 5px 10px;
                margin: 0 5px;
                border-radius: 4px;
                cursor: pointer;
            }

        /* Login button styles */
        .login-button {
            background-color: #f9a825;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

            .login-button:hover {
                background-color: #333;
            }
    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />
</head>

<div class="category-container">
    <div class="category">
        <img src="images/call-bell.png" alt="All Categories" />
        <span>All</span>
    </div>
    <div class="category">
        <img src="images/hamburger.png" alt="Beef Burgers" />
        <span>Beef Burgers</span>
    </div>
    <div class="category">
        <img src="images/chicken.png" alt="Chicken" />
        <span>Chicken</span>
    </div>
    <div class="category">
        <img src="images/fried-potatoes.png" alt="Sides" />
        <span>Sides</span>
    </div>
    <div class="category">
        <img src="images/ice-drink.png" alt="Drinks" />
        <span>Drinks</span>
    </div>
    <div class="category">
        <img src="images/dessert-cake.png" alt="Desserts" />
        <span>Desserts</span>
    </div>
    <div class="category" @onclick="ShowCartModal">
        <img src="images/shopping-cart.png" alt="Cart" />
        <span>Ver carrito</span>
    </div>
</div>


@if (foods == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-container">
        @foreach (var food in foods)
        {
            <div class="card">
                <img src="@food.Picture" alt="Image of @food.Title" class="card-img-top" />
                <div class="card-body">
                    <h5 class="card-title">@food.Title</h5>
                    <p class="price">$@food.Price</p>
                </div>
                <i class="fas fa-shopping-cart cart-icon" @onclick="() => AddToCart(food)"></i>
            </div>
        }
    </div>
}

<div id="cartModal" class="modal" style="@(isCartModalVisible ? "display: block;" : "display: none;")">
    <div class="modal-content">
        <span class="close" @onclick="CloseCartModal">&times;</span>
        <h2>Productos Agregados</h2>
        @if (cart.Any())
        {
            foreach (var item in cart.GroupBy(f => f.Title).Select(g => g.First()))
            {
                var quantity = cart.Count(f => f.Title == item.Title);
                <div class="cart-item">
                    <img src="@item.Picture" alt="Image of @item.Title" />
                    <div>
                        <h5>@item.Title</h5>
                        <p class="price">$@item.Price</p>
                    </div>
                    <div class="quantity">
                        <button @onclick="() => ChangeQuantity(item, -1)">-</button>
                        <span>@quantity</span>
                        <button @onclick="() => ChangeQuantity(item, 1)">+</button>
                    </div>
                </div>
            }
            <h3>Total: $@TotalPrice()</h3>
            <button class="login-button" @onclick="ProceedToCheckout">Pay with PayPal</button>
        }
        else
        {
            <p>Your cart is empty.</p>
        }
    </div>
</div>

@code {
    private foodTable[]? foods;
    private List<foodTable> cart = new List<foodTable>();
    private bool isCartModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFoods();
    }

    private async Task LoadFoods()
    {
        try
        {
            foods = await http.GetFromJsonAsync<foodTable[]>("foodTable");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading food: {ex.Message}");
        }
    }

    private void AddToCart(foodTable food)
    {
        cart.Add(food);
        Console.WriteLine($"{food.Title} agregado al carrito.");
    }

    private void ChangeQuantity(foodTable food, int change)
    {
        var itemCount = cart.Count(f => f.Title == food.Title);
        if (itemCount + change <= 0)
        {
            cart.RemoveAll(f => f.Title == food.Title);
        }
        else
        {
            for (int i = 0; i < change; i++)
            {
                cart.Add(food);
            }
        }
    }

    private void ShowCartModal()
    {
        isCartModalVisible = true; // Open modal
    }

    private decimal TotalPrice()
    {
        return cart
            .GroupBy(f => f.Title)
            .Sum(g => Convert.ToDecimal(g.First().Price) * g.Count());
    }

    private void CloseCartModal()
    {
        isCartModalVisible = false; // Close modal
    }

    private void ProceedToCheckout()
    {
        NavManager.NavigateTo("https://www.paypal.com");
    }
}
