@page "/food/menu"
@inject HttpClient http
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IJSRuntime JS


<PageTitle>Menu</PageTitle>
<head>
    <style>
        body {
            background-color: #fdf7e7;
        }

        .card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            justify-content: space-around;
        }

        .card {
            width: 250px;
            border: 1px solid #ddd;
            border-radius: 16px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            background-color: white;
            position: relative;
            padding: 16px;
        }

        .card-img-top {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-radius: 16px 16px 0 0;
            border-top: 4px solid #f9a825;
        }

        .card-body {
            padding: 16px;
            text-align: center;
        }

        .card-title {
            font-size: 1.25rem;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .price {
            font-size: 1.5rem;
            color: #000;
            font-weight: bold;
        }

        .cart-icon {
            position: absolute;
            bottom: 16px;
            right: 16px;
            font-size: 24px;
            background-color: #333;
            color: white;
            border-radius: 50%;
            padding: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .cart-icon:hover {
                background-color: #f9a825;
            }

        .category-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .category {
            display: flex;
            align-items: center;
            flex-direction: column;
            border: 1px solid #ddd;
            border-radius: 16px;
            padding: 10px;
            background-color: #fff;
            width: 100px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .category:hover {
                background-color: #f9a825;
            }

            .category img {
                width: 40px;
                height: 40px;
            }

        .modal {
            display: flex;
            justify-content: center;
            align-items: center;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #fefefe;
            width: 80%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            padding: 20px;
            border: 1px solid #888;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }

        .cart-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

            .cart-item img {
                width: 50px;
                height: 50px;
                object-fit: cover;
                border-radius: 8px;
                margin-right: 10px;
            }

        .quantity {
            display: flex;
            align-items: center;
        }

            .quantity button {
                background-color: #f9a825;
                color: white;
                border: none;
                padding: 5px 10px;
                margin: 0 5px;
                border-radius: 4px;
                cursor: pointer;
            }

        .login-button {
            background-color: #FFAF36;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 30px;
        }

            .login-button:hover {
                background-color: #FF842C;
                color: white;
            }

        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #28a745;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            font-size: 16px;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }

            .toast.show {
                opacity: 1;
            }

        .customer-info {
            margin-bottom: 20px;
        }

            .customer-info input {
                width: 100%;
                padding: 8px;
                margin-bottom: 10px;
                border: 1px solid #ddd;
                border-radius: 4px;
            }

    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />
</head>

<div class="category-container">
    <div class="category" @onclick="GetAllProducts">
        <img src="images/call-bell.png" alt="All Categories" />
        <span>All</span>
    </div>
    @if(categories == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var category in categories)
        {
            <div class="category" @onclick="() => FilterByCategory(category.Id)">
                <img src="@category.Icon" alt="@category.Name" />
                <span>@category.Name</span>
            </div>
        }
    }
    <div class="category" @onclick="ShowCartModal">
        <img src="images/shopping-cart.png" alt="Cart" />
        <span>Ver carrito</span>
    </div>
</div>

@if (foods == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-container">
        @foreach (var food in foods)
        {
            <div class="card">
                <img src="@food.Picture" alt="Image of @food.Title" class="card-img-top" />
                <div class="card-body">
                    <h5 class="card-title">@food.Title</h5>
                    <p class="price">$@food.Price</p>
                </div>
                <i class="fas fa-shopping-cart cart-icon" @onclick="() => AddToCart(food)"></i>
            </div>
        }
    </div>
}

@if (isCartModalVisible)
{
    <div class="modal" style="display: block;">
        <div class="modal-content">
            <span class="close" @onclick="CloseCartModal">&times;</span>
            <div class="customer-info">
                <h3>Información del cliente</h3>
                <input type="text" @bind="customerName" placeholder="Nombre" />
                <input type="text" @bind="address" placeholder="Dirección" />
                <input type="email" @bind="email" placeholder="Correo Electrónico" />
                <input type="tel" @bind="phone" placeholder="Teléfono" />
                <input type="text" @bind="orders" placeholder="Additional Notes" style="visibility: hidden;" />
            </div>
            <h3 style="margin-top: -50px;">Productos seleccionados</h3>
            @if (cart.Any())
            {
                foreach (var item in cart.GroupBy(f => f.Title).Select(g => g.First()))
                {
                    var quantity = cart.Count(f => f.Title == item.Title);
                    <div class="cart-item">
                        <img src="@item.Picture" alt="Image of @item.Title" />
                        <div>
                            <h5>@item.Title</h5>
                            <p class="price">$@item.Price</p>
                        </div>
                        <div class="quantity">
                            <button style="background-color: #2F2F2F !important;" @onclick="() => ChangeQuantity(item, -1)">-</button>
                            <span>@quantity</span>
                            <button style="background-color: #2F2F2F !important;" @onclick="() => ChangeQuantity(item, 1)">+</button>
                            <button class="" style="background-color: #d02525 !important; " @onclick="() => RemoveAllItems(item)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
              
                    <h3>Total: $@TotalPrice()</h3>
                

                <button class="login-button" @onclick="SaveOrder">Finalizar pago</button>
            }
            else
            {
                <p>Your cart is empty.</p>
            }
        </div>
    </div>
}

@if (isToastVisible)
{
    <div class="toast show">@toastMessage</div>
}

@code {
    private string error = string.Empty;
    private categoryTable[]? categories;
    private foodTable[]? foods;
    private List<foodTable> cart = new List<foodTable>();
    private bool isCartModalVisible = false;
    private bool isToastVisible = false;
    private string toastMessage = "";

    private string customerName = "";
    private string address = "";
    private string email = "";
    private string phone = "";
    private string orders = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadFoods();
    }

    private async Task<string> GetTokenFromLocalStorage()
    {
        return await JS.InvokeAsync<string>("localStorage.getItem", "Token");
    }

    private async Task LoadFoods()
    {
        try
        {
            var token = await GetTokenFromLocalStorage();// Obtén el token de tu lógica de autenticación
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.ToString());

            categories = await http.GetFromJsonAsync<categoryTable[]>("categoryTable");
            foods = await http.GetFromJsonAsync<foodTable[]>("foodTable");
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading food: {ex.Message}");
        }
    }

    private async Task GetAllProducts()
    {
        foods = await http.GetFromJsonAsync<foodTable[]>("foodTable");
    }

    private async Task FilterByCategory(int categoryId)
    {
        foods = await http.GetFromJsonAsync<foodTable[]>($"foodTable/GetByCategory/{categoryId}");
    }

    private void AddToCart(foodTable food)
    {
        cart.Add(food);
        ShowToast($"{food.Title} agregado al carrito.");
        Console.WriteLine($"{food.Title} agregado al carrito.");
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        isToastVisible = true;

        Task.Delay(3000).ContinueWith(_ =>
        {
            isToastVisible = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ChangeQuantity(foodTable food, int change)
    {
        if (change < 0)
        {
            var itemCount = cart.Count(f => f.Title == food.Title);
            if (itemCount > 1)
            {
                var itemToRemove = cart.FirstOrDefault(f => f.Title == food.Title);
                if (itemToRemove != null)
                {
                    cart.Remove(itemToRemove);
                }
            }
        }
        else if (change > 0)
        {
            cart.Add(food);
        }
    }

    private void RemoveAllItems(foodTable food)
    {
        cart.RemoveAll(f => f.Title == food.Title);
    }

    private void ShowCartModal()
    {
        isCartModalVisible = true;
    }

    private decimal TotalPrice()
    {
        return cart
            .GroupBy(f => f.Title)
            .Sum(g => Convert.ToDecimal(g.First().Price) * g.Count());
    }

    private void CloseCartModal()
    {
        isCartModalVisible = false;
    }

    private async Task SaveOrder()
    {
        var orderJson = new
        {
            CustomerName = customerName,
            Total = TotalPrice(),
            Address = address,
            Email = email,
            Phone = phone,
            Orders = orders,
            orderDetails = cart.GroupBy(f => f.Title).Select(g => new
            {
                FoodTableId = g.First().Id,
                Quantity = g.Count(),
                Price = Convert.ToDecimal(g.First().Price)
            }).ToList()
        };

        try
        {
            var response = await http.PostAsJsonAsync("orderTable", orderJson);
            if (response.IsSuccessStatusCode)
            {
                ShowToast("Pedido realizado con éxito!");
                CloseCartModal();
                cart.Clear();

                customerName = "";
                address = "";
                email = "";
                phone = "";
                orders = "";
            }
            else
            {
                ShowToast("Error placing order. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error: {ex.Message}");
        }
    }
}